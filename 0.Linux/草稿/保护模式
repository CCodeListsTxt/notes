[toc]

## 系统寄存器

### 标志寄存器

ZF(zero)字段：指令执行后，结果是否为0。

PF(parity)字段：指令执行后，结果中bit为的1的数量是否为偶数。

SF(sign)字段：指令执行后，结果是否为负。

CF(carry)字段：指令执行后，最高位是否产生进位，或从最高位借位。

OF(overflow)字段：指令执行后，结果是否产生溢出。

IF(interrupt)字段：是否启用中断。

TF(trap)字段：cpu是否开启单步中断(每执行一跳指令，就产生一次中断)。

### 内存管理寄存器

8086cpu提供四个内存管理寄存器，存放分段内存管理所需要的系统表的基地址。

* GDTR，全局描述符表寄存器。
* LDTR，局部描述符表寄存器。
* IDTR，中断描述表寄存器。
* TR，任务寄存器。

### 控制寄存器

8086cpu提供四个控制寄存器(cr0~cr3)，用于控制和确定处理器的操作模式以及当前执行任务的特性。

* cr0，含有控制处理器操作模式和状态的标志。
  * PE(protected-enabled)位开启时，进入保护模式，且开启分段机制[^1]。位于cr0的第一位。
  * PG(paging)位开启时，开启分页机制[^2]。位于cr0的最后一位。
* cr1，保留。
* cr2，含有导致页错误的线性地址。
* cr3，含有页目录表物理内存基地址。只有高20位有效，低12位保留。

### 相关指令

| 指令                                | 说明                                                         |
| ----------------------------------- | ------------------------------------------------------------ |
| LLDT(load-LDT)、SLDT(store-LDT)     | 从内存加载LDT段选择子和短描述符到LDTR；将LDTR载入内存或通用寄存器 |
| LGDT(load-GDT)、SGDT                |                                                              |
| LTR(load-TR)、STR                   |                                                              |
| LIDT(load-IDT)、SIDT                |                                                              |
| LMSW(load-machine-state-word)、SMSW | 加载及其状态字(cr0寄存器的0~15位)                            |
| HLT(halt-processor)                 | 停止处理机执行[^3]                                           |

## 内存管理

### 内存寻址

8086使用『段』寻址技术，即『逻辑地址 = 段基地址 + 偏移地址』。

### 地址变换

内存管理系统包含两个关键部分：

* 内存保护，防止一个任务访问另一个任务或操作系统的内存区域。
* 地址变换，将程序运行时的逻辑内存空间和实际物理内存空间分离。

8086使用『分段』和『分页』两种机制实现地址变换。第一阶段使用分段机制将程序的『逻辑地址』转换为『线性地址』，第二阶段使用分页机制将『线性地址』转换为『物理地址』。如果没有启用『分页机制』，那么程序运行的内存空间直接映射到物理内存中。

#### 分段

每个段由三个参数定义：段基地址、段限长和段属性。段的属性存放在『段描述符，Segment-Descriptor』的结构中。将逻辑地址转换为线性地址时，处理器会进行如下操作：

1. 使用『段选择子』中的段索引，从『段描述符表』中定位对应的『段描述符』[^4]。
2. 通过『段描述符』验证访问权限和访问范围。
3. 从『段描述符』中获取段基地址，并加上偏移量，计算『线性地址』。

##### 段选择子

段选择子是段的16位标识符，其中存放段描述符的权限、标志以及索引。

* 0~1位为『特权级字段，RPL』，提供段保护信息。
* 第2位指定段描述符属于GDT还是LDT[^5]。
* 3~15位表示段描述符在描述符表中的索引。

为了提高地址转换的效率，8086提供了6个段寄存器，用于存放不同的段选择子：『代码段，CS』、『数据段，DS』、『栈段，SS』、以及三个辅助的数据段寄存器ES、FS和GS。

##### 段描述符

段描述符通常由编译器、链接器、加载器或操作系统创建，绝不是应用程序自行创建。32位cpu的段描述符通用结构如下：

<img src="./../../../../AppData/Roaming/Typora/typora-user-images/image-20230912150312284.png" alt="image-20230912150312284" style="zoom:50%;" />

* Type字段，说明段描述符类型[^7]、段的拓展方向和可访问性。
* S字段，说明当前段描述符是『系统段』还是『代码或数据段』[^6]。
* DPL字段，说明当前段描述符的权限级，从0~3权限递减。
* P字段，指示当前段是否存在内存中。
* G字段，说明『段限长』的颗粒度。0表示颗粒度为字节，1表示颗粒度为4KB。

##### 段描述符表

『段描述符表』是存储段描述符的一个数组，其最多存储8192个8字节的段描述符。

『全局描述符表，Global-Descriptor-Table』在所有任务中共享，『局部描述符表，Local-Descriptor-Table』各个任务单独使用，用于隔离任务的虚拟内存空间。

GDT和LDT存放在线性空间中，其基地址存放在GDTR和LDTR中。

#### 分页

分页机制将线性地址空间划分为固定大小的页面[^8]，并将其映射到等大小的物理内存空间或磁盘存储空间中。

##### 页表

分页转换的功能由驻留在内存中的『页表』描述，其可看做2^20^物理地址数组，线性地址到物理地址的映射可简单视为数组查找[^9]。

###### 两级页表

页表含有2^20^项，每项占用4字节，最多将占用4MB内存。为了减少内存占用，32位8086使用两级表结构：

* 第一级称为『页目录』，长度为一个页面，拥有2^10^个4字节长度的表项，这些表项指向对应的二级表，使用线性地址中的高10位索引。
* 第二级称为『页表』，长度为一个页面，使用线性地址中的中10位索引。

<img src="./../../../../AppData/Roaming/Typora/typora-user-images/image-20230912153253069.png" alt="image-20230912153253069" style="zoom:50%;" />

使用两级页表结构，并没有解决分页机制最多占用4MB内存的问题。但只需要『页目录』连续存放在内存中，『页表』可以分散存放在内存空间中，甚至可以存放在磁盘空间中，当需要时再读入内存。

## 中断和异常

中断或异常产生时，通常会导致执行控制从当前任务转移到『中断处理程序』或『异常处理程序』的特殊函数、任务中。

中断主要由外部事件或硬件设备引发[^10]，其是异步的，可以发送在程序执行的随机时刻。

异常主要由指令执行或处理器内部状态引发，其是同步的，其发生与指令执行有关。

### 异常分类

根据异常的报告方式以及指令是否可以重新执行，异常可分为以下几种：

* 『故障，fault』，准确报告异常产生位置，可以被纠正，处理器将机器状态恢复到产生fault之前的状态，且重新执行产生fault的指令。
* 『陷阱，trap』，准确报告异常产生位置，可以被纠正，恢复后执行产生trap指令的下一条指令。
* 『中止，abort』，无法报告异常产生位置，无法被纠正，且导致异常的程序会直接终止。

### 异常和中断向量

所有需要被处理器进行特殊处理的异常和中断都被赋予了一个标识号，称为『向量』。处理器使用『向量』作为『中段描述符表』的索引，来定位异常或中断处理程序的入口位置。

x86允许的『向量』范围是『0\~255』，其中『0\~31』保留作为x86定义的异常和中断，『32~255』用作用户自定义中断。

### 中断描述符

有三种类型的门描述符：

* 『中断门描述符，interrupt』，处理中断。
* 『陷阱门描述符，trap』，处理异常。
* 『任务门描述符，task』，任务切换。

### 中段描述符表

『中段描述符表，ID-Table』将异常和中断与其处理过程联系起来，其最多可以存储256个8字节长度的『中段描述符』。IDT可以存放在线性地址空间的任何地方，通过IDTR寄存器定位IDT的位置。

 ## 任务管理











[^1]:修改PE位之后，程序必须立即使用跳转指令，以刷新处理器执行管道
[^2]:PG开启前，PE必须处于开启状态
[^3]:触发中断可以恢复cpu执行
[^4]:只有当新的段选择符加载到段寄存器中时才会进行定位
[^5]:0表示GDT，1表示LDT
[^6]:0表示系统段描述符，1表示代码或数据段描述符
[^7]:第11为表示段类型：0为数据段，1为代码段
[^8]:通常划分4KB为一个页，此时页面基地址是4KB对齐的
[^9]:线性地址的高20位构成数组的索引，低12位构成页内偏移
[^10]:也可以使用『`int`』指令主动触发