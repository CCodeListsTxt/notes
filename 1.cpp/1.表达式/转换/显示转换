#### 函数式转换

函数式转换的基本语法为：`类型(表达式列表)`、`类型{表达式列表}`（『类型』必须是单个单词的类型名，即`unsigned int(表达式)`这样的语法是非法的）。

如果『圆括号』中没有表达式，那么：

* 如果『类型』是非数组完整对象类型，那么表达式是『类型』类型的『纯右值』。
* 如果『类型』是对象类型，那么对象会被[值初始化]()。

如果『圆括号』中只有一个表达式，其等价于『c风格转换表达式』。[示例](#示例1)

如果『圆括号』中存在多个表达式或[花括号初始化列表]()，那么『类型』必须是具有适当构造函数的类。该表达式作为『类型』的『纯右值』，其结果对象以表达式列表[直接初始化]()。

如果使用『花括号』，表达式作为『类型』的『纯右值』，其结果对象以表达式列表[直接初始化]()（这是唯一可以创建[数组纯右值]()的方式）。

#### 纯右值转换

c++23起，可以使用`auto(表达式)`或`auto{表达式}`，通过拷贝或移动创建表达式对象类型的『纯右值』。[示例](#示例3)

#### 解决歧义

###### 有歧义的声明

在『以函数式转换表达式作为左侧子表达式的语句』，和『声明语句』有歧义的情况下，将其解析为『声明』以消除歧义。[示例](#示例4)

###### 有歧义的函数形参

使用『圆括号函数式转换』作为初始化器时，也存在如上歧义。[示例](#示例5)

###### 有歧义的类型标识









# 示例

###### 示例1

```cpp
struct T {
    T(int) { std::cout << "T(int)\n"; }
};

auto main() -> int {
    T(0);   // T(int)
    (T)0;   // T(int)

    return 0;
}
```

###### 示例2

```cpp
auto main() -> int {
    using arr_t = int[1];
    arr_t{};
    arr_t();  // error，数组类型不能值初始化

    return 0;
}
```

###### 示例3

```cpp
struct T {
    T() { std::cout << "construct\n"; }
    T(const T&) { std::cout << "copy\n"; }
    T(T&&) { std::cout << "move\n"; }
    ~T() { std::cout << "destruct\n"; }
};

auto main() -> int {
    auto a = T{};  	// construct
    std::cout << "-------------\n";
    auto{a};  					// copy + destruct
    std::cout << "-------------\n";
    auto{std::move(a)};  // copy + destruct
    std::cout << "-------------\n";

    return 0;
}  // destruct
```

###### 示例4

```cpp
auto main() -> int {
    int(i1) = 10;            // int(i1)作为左侧表达式，解析为声明
    int i2  = int(i1) + 10;  // int(i1)作为右侧表达式，不存在歧义
    int(i3)(30);
    std::cout << i1 << "\n"   // 10
              << i2 << "\n"   // 20
              << i3 << "\n";  // 30

    return 0;
}
```

###### 示例5

```cpp
struct T {
    T(int) {}
};

int  i;
auto main() -> int {
    T f1(int(i));                                                 // 函数声明
    std::cout << std::is_same_v<decltype(f1), T(int)> << "\n";    // true
    T f2(int());                                                  // 函数声明
    std::cout << std::is_same_v<decltype(f2), T(int())> << "\n";  //  true
    T v((int(i)));
    std::cout << std::is_same_v<decltype(v), T> << "\n";  // true

    return 0;
}
```

